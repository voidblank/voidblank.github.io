[ { "title": "MySQL 基础", "url": "/posts/mysql-basic/", "categories": "mysql", "tags": "MySQL, 数据库, 基础", "date": "2021-05-30 21:57:00 +0800", "snippet": "MySQL 基础DQL Data Query Language,数据查询语言语句-- 一SELECT st_id AS id, st_name AS NAME FROM test_table1 t1, test_table2 t2 WHERE t1.st_id = t2.s_id AND t1.st_id IS NOT NULL ORDER BY t1.st_time DESC LIMIT 5, 10-- 二SELECT st_id FROM test_table1 t1 LEFT JOIN test_table2 t2 ON t1.st_id = t2.s_id WHERE t2..." }, { "title": "AQS", "url": "/posts/abstract-queued-synchronizer/", "categories": "Java", "tags": "java, java源码, JDK1.8, 后台, 多线程, 锁", "date": "2021-05-23 13:32:00 +0800", "snippet": "AbstractQueuedSynchronizer public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable AQS成员变量head private transient volatile Node head; 阻塞队列的头部,懒加载 仅会通过setHead()来进行初始化 如果存在head,那么状态一定不为CANCELLEDtail private transient volatile Node t..." }, { "title": "tomcat配置文件 server.xml", "url": "/posts/server.xml/", "categories": "tomcat", "tags": "tomcat, 配置文件", "date": "2021-05-23 11:55:00 +0800", "snippet": "tomcat配置文件 server.xml 默认目录:$TOMCAT_HOME/conf/server.xml 文件为静态资源类型,修改后需要重启tomcat才能生效 注:标签的顺序根据在配置文件中出现的顺序排列&amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt;&amp;lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&amp;gt; &amp;lt;Listener className=&quot;org.apache...." }, { "title": "nginx配置文件 nginx.conf", "url": "/posts/nginx.conf/", "categories": "nginx", "tags": "nginx, 配置文件", "date": "2021-05-23 11:55:00 +0800", "snippet": "nginx配置文件 nginx.conf 默认目录: windows:nginx/conf/nginx.conf linux:nginx/nginx.conf 修改配置文件后需要进行nginx -s reload操作 检查配置文件是否无误:nginx -t 顺序依旧是按照从上到下的顺序说明#指明nginx的用户及用户组#windows下不指定user www www;#nginx的worker进程数量,根据硬件进行调整,一般为CPU数量或2倍数量worker_processes 2;#指定进程可以打开的最大描述符,值应与 /etc/se..." }, { "title": "SpringBoot 注解", "url": "/posts/spring-boot-%E6%B3%A8%E8%A7%A3/", "categories": "Spring", "tags": "SpringBoot, Java, 注解", "date": "2021-05-16 14:18:00 +0800", "snippet": "SpringBoot 注解A@Autowired org.springframework.beans.factory.annotation.Autowired 标注在类、成员变量、构造函数上,他用来进行自动装配 使用这个注解后,被标注的类/成员变量/构造函数将不需要写出get与set方法B@Bean org.springframework.context.annotation.Bean 标注在方法上,表示向容器中添加一个组件,将方法的返回值添加到容器中C@Component org.springframework.stereotype.Component 标注在类上,该类会..." }, { "title": "CSS基础", "url": "/posts/css/", "categories": "CSS", "tags": "前端, CSS, 基础", "date": "2021-05-16 13:59:00 +0800", "snippet": "CSS语法 {}内为k-v对，使用分号分割 注释:/* */基本p { color: blue; front-size: 12px;} p表示指示器ID选择器#param1 { color: blue; front-size: 12px;} 使用#开始的，表示id 不能以数字开始 id选择器不能重名类选择器/*第一种*/.center(text-align:center);/*第二种*/.box{ background: red;}/*第三种，子代选择器*/.margin .box{ background: green;}/*第四种，后..." }, { "title": "ThreadPoolExecutor", "url": "/posts/thread-pool-executor/", "categories": "Java", "tags": "java, java源码, JDK1.8, 后台", "date": "2021-05-10 19:37:00 +0800", "snippet": "ThreadPoolExecutor public class ThreadPoolExecutor extends AbstractExecutorService 线程池属性ctl private final AtomicInteger ctl 存储线程池状态及池内总的线程数量 线程存储上限CAPACITY:(1 « COUNT_BITS) - 1(即229 - 1) COUNT_BITS:Integer.SIZE - 3(即29) 获取当前线程池状态:private static int runStateOf(int c) { return c &amp;amp; ~C..." }, { "title": "ReentrantLock", "url": "/posts/reentrant-lock/", "categories": "Java", "tags": "java, java源码, JDK1.8, 后台, 锁", "date": "2021-04-18 14:15:00 +0800", "snippet": "ReentrantLock public class ReentrantLock implements Lock, java.io.Serializable Lock的常用实现成员变量sync private final Sync sync; 提供所有实现机制的同步器构造器 public ReentrantLock() public ReentrantLock(boolean) 默认构造器中的sync为非公平锁,带参构造器中若传入true则为公平锁,否则为非公平锁方法lock() public void lock() 执行锁操作,调用sync.lock()tryLock..." }, { "title": "ThreadLocal", "url": "/posts/thread-local/", "categories": "Java", "tags": "java, java源码, JDK1.8, 后台, 多线程", "date": "2021-04-18 14:13:00 +0800", "snippet": "ThreadLocal public class ThreadLocal&amp;lt;T&amp;gt; 用于为每个线程存储属于自己的属性/值,在多线程的情况下做到数据隔离,防止自身线程的变量被其他线程更改方法get() public T get() 获取当前线程在ThreadLocalMap中存储的value 使用的Map为当前线程的threadLocals,key为调用的ThreadLocal 如果该线程还未初始化导致没有threadLocals,那么会执行setInitialValue(),并把结果值(null)返回setInitialValue() private..." }, { "title": "JavaScript", "url": "/posts/JavaScript/", "categories": "Js", "tags": "js, 基础, 前端", "date": "2021-04-18 14:03:00 +0800", "snippet": "JavaScript输出 window.alert()：弹出警告框 document.write()内容输出到html文档中 如果在html加载完成后执行该函数，则会使html内容被覆盖 document.getElementById(&quot;demo&quot;).innerHTML:将id=demo的内容改写 console.log()：输出到控制台变量变量类型 Number类型:数值 String类型:字符串 boolean类型:布尔值 function类型:函数 symbol类型:唯一值 Array类型:数组类型 Objec..." }, { "title": "Thread", "url": "/posts/thread/", "categories": "Java", "tags": "java, java源码, JDK1.8, 后台, 线程", "date": "2021-04-17 13:31:00 +0800", "snippet": "thread public class Thread implements Runnable{}成员变量name private volatile String name; 线程的名字 设置:public final synchronized void setName(String name) 先判断是否允许修改,再判断threadStatus是否为0 获取:public final String getName()priority private int priority; 线程的优先级,范围为1-10的整数 超出范围会抛出IllegalA..." }, { "title": "C++知识点总结目录", "url": "/posts/cpp/", "categories": "cpp", "tags": "基础, cpp", "date": "2021-04-17 11:14:00 +0800", "snippet": "C++知识点总结目录数据类型 字符型char:1个字节 整数型int:4个字节 短整数型short int:2个字节 长征属性long int:8个字节 浮点数型float:4个字节(7位) 长浮点数型double:8个字节(15位) 注:signed修饰，大小不变;unsigned修饰,大小不变,仅非负 typedef:自定义数据类型名称 用法:typedef unsigned int size_t; 也可以用于结构体上 与#define的比较: #define可以用在任何位置，且是自声明起全局;t..." }, { "title": "Vuex", "url": "/posts/vuex/", "categories": "vue", "tags": "vue, 前端", "date": "2021-04-11 14:36:00 +0800", "snippet": "Vuex完整的store创建const moduleA = { state: () =&amp;gt; ({ arr: [] }), mutations: { insert (state, payload) { state.arr.push(payload) }, delete (state, payload) { state.arr = state.arr.filter(item =&amp;gt; item.id != payload.id) }, ..." }, { "title": "Vue Router", "url": "/posts/vue-router/", "categories": "vue", "tags": "vue, 前端", "date": "2021-04-11 14:35:00 +0800", "snippet": "Vue Router定义vue-router 简单定义// 定义组件const f = { template: &#39;&amp;lt;div&amp;gt;f&amp;lt;/div&amp;gt;&#39; }const b = { template: &#39;&amp;lt;div&amp;gt;b&amp;lt;/div&amp;gt;&#39; }// 定义路由const routes = [ { path: &#39;/f&#39;, component: f }, { path: &#39;/b&#39;, component: b }]// 创建rout..." }, { "title": "安装vue", "url": "/posts/vue-install/", "categories": "vue", "tags": "vue, 前端, 安装", "date": "2021-04-11 14:34:00 +0800", "snippet": "安装vue安装node.js,内含npm npm -v查看npm版本号 可以设置淘宝的镜像npm config set registry https://registry.npm.taobao.org 查看是否设置成功npm config get registry 也可以安装cnpm来进行代替npm进行下载安装插件等文件npm install -g cnpm安装vue npm install vue -g安装vue-cli npm install vue-cli -g npm install --global vue-cli使用vue -V来检查是否安装成功 PATH中添..." }, { "title": "Vue.js", "url": "/posts/Vue/", "categories": "vue", "tags": "vue, 前端", "date": "2021-04-11 14:29:00 +0800", "snippet": "Vue.js模板语法v-bind 用于设置html属性中的值 用法: &amp;lt;div v-bind:href=&quot;url&quot;&amp;gt;&amp;lt;/div&amp;gt;:将vue的url变量绑定在该div的href上 可写作&amp;lt;div :href=&quot;url&quot;&amp;gt;&amp;lt;/div&amp;gt; 在css上的运用: &amp;lt;div class=&quot;a&quot; :class=&quot;{ active: isActive..." }, { "title": "数据结构与算法", "url": "/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/", "categories": "Algorithm", "tags": "基础, 数据结构, 算法", "date": "2021-04-10 16:42:00 +0800", "snippet": "数据结构与算法线性表 线性结构,头节点无前驱有一个后继,尾节点无后继有一个前驱。 只能顺序查找,查找时间复杂度O(n),删除时间复杂度O(1)数组 顺序存储,连续存储,方便查找,可以随机查找元素,删除和插入较慢。 多维数组不是线性表 插入:时间复杂度O(n) 删除:时间复杂度O(n) 查找:时间复杂度O(n)线性链表 链式存储结构,可以不连续存储(可散和连续),方便插入删除,不能随机查找元素,查找元素较慢。 插入:时间复杂度:表头O(1),表中O(n) 删除:时间复杂度:表头O(1),表中O(n) 查找:时间复杂度O(n)循环链表 头尾相接的链表,可以不连续存储(..." }, { "title": "Python知识点总结目录", "url": "/posts/python/", "categories": "Python", "tags": "python, 基础", "date": "2021-04-10 16:36:00 +0800", "snippet": "Python 知识点总结目录数值数据类型 整数:int 浮点型:float,double,decimal 复数:complex序列和容器str字符串 可以使用for进行遍历 可以使用”“或是’‘,视情况而定，一般最外层用”” r&quot;C:\\string&quot;相当于&quot;C:\\\\string&quot; 在string中使用’’’ ‘&#39;’可以换行存储字符串,保留换行格式 在print中使用string及参数的方法: %方法:print(&quot;I&#39;m %s and I&#39;m %s years old!&quot;..." }, { "title": "Redis基础", "url": "/posts/redis/", "categories": "Redis", "tags": "redis, 算法, 数据结构", "date": "2021-04-10 15:28:00 +0800", "snippet": "Redis指令启动 启动本地: &amp;gt;redis-cli 启动远程: &amp;gt;redis-cli -h host -p port -a pswdKey 设置: SET key value 获取: GET key 如果没有值,返回空 删除: DEL key 成功返回1,失败返回0 检查是否存在: EXISTS key 存在返回1,否则0 设置过期时间(s): EXPIRE key seconds 成功返回1,key不存在或更新时间(2.1.3及以下版本..." }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging", "tags": "google analytics, pageviews", "date": "2021-01-04 07:32:00 +0800", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv disabled unless you have a good reason. If your website has low traffic, the page views count would discourage you to write ..." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll and Bundler.InstallationThere are two ways to get the theme: Install from RubyGems - Easy to update, isolate irrelevant project files so you can focus on writing. Fork on GitHub - Convenient for custom de..." } ]

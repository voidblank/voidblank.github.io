webpackJsonp([16],{"89rc":function(n,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),s.d(a,"modifyTime",function(){return t}),s.d(a,"s",function(){return p}),s.d(a,"topMsg",function(){return e});var t="2021-06-20 16:53:59",p='      <div class="mume markdown-preview  ">\n      <h1 class="mume-header" id="abstractqueuedsynchronizer">AbstractQueuedSynchronizer</h1>\n\n<ul>\n<li><code>public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable</code></li>\n<li>AQS</li>\n</ul>\n<h2 class="mume-header" id="%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F">&#x6210;&#x5458;&#x53D8;&#x91CF;</h2>\n\n<h3 class="mume-header" id="head">head</h3>\n\n<ul>\n<li><code>private transient volatile Node head;</code></li>\n<li>&#x963B;&#x585E;&#x961F;&#x5217;&#x7684;&#x5934;&#x90E8;,&#x61D2;&#x52A0;&#x8F7D;</li>\n<li>&#x4EC5;&#x4F1A;&#x901A;&#x8FC7;<a href="#setheadnode">setHead()</a>&#x6765;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316;</li>\n<li>&#x5982;&#x679C;&#x5B58;&#x5728;<code>head</code>,&#x90A3;&#x4E48;&#x72B6;&#x6001;&#x4E00;&#x5B9A;&#x4E0D;&#x4E3A;<a href="#cancelled">CANCELLED</a></li>\n</ul>\n<h3 class="mume-header" id="tail">tail</h3>\n\n<ul>\n<li><code>private transient volatile Node tail;</code></li>\n<li>&#x963B;&#x585E;&#x961F;&#x5217;&#x7684;&#x5C3E;&#x90E8;,&#x61D2;&#x52A0;&#x8F7D;</li>\n</ul>\n<h3 class="mume-header" id="state">state</h3>\n\n<ul>\n<li><code>private volatile int state;</code></li>\n<li>&#x8868;&#x793A;&#x5F53;&#x524D;&#x7684;&#x540C;&#x6B65;&#x72B6;&#x6001;</li>\n</ul>\n<h2 class="mume-header" id="%E6%9E%84%E9%80%A0%E5%99%A8">&#x6784;&#x9020;&#x5668;</h2>\n\n<h2 class="mume-header" id="%E6%96%B9%E6%B3%95">&#x65B9;&#x6CD5;</h2>\n\n<h3 class="mume-header" id="getstate">getState()</h3>\n\n<ul>\n<li><code>protected final int getState()</code></li>\n<li>&#x83B7;&#x53D6;state</li>\n</ul>\n<h3 class="mume-header" id="setstateint">setState(int)</h3>\n\n<ul>\n<li><code>protected final void setState(int newState)</code></li>\n<li>&#x66F4;&#x65B0;state</li>\n</ul>\n<h3 class="mume-header" id="compareandsetstateint-int">compareAndSetState(int, int)</h3>\n\n<ul>\n<li><code>protected final boolean compareAndSetState(int expect, int update)</code></li>\n<li>CAS&#x64CD;&#x4F5C;,&#x66F4;&#x65B0;state,&#x6210;&#x529F;&#x8FD4;&#x56DE;true,&#x5931;&#x8D25;&#x8FD4;&#x56DE;false</li>\n<li>expect:&#x9884;&#x671F;&#x7684;&#x5F53;&#x524D;state&#x503C;</li>\n<li>update:&#x66F4;&#x65B0;&#x540E;&#x7684;state&#x503C;</li>\n</ul>\n<h3 class="mume-header" id="enqnode">enq(Node)</h3>\n\n<ul>\n<li><code>private Node enq(final Node node)</code></li>\n<li>&#x5411;&#x540C;&#x6B65;&#x961F;&#x5217;&#x6DFB;&#x52A0;&#x8282;&#x70B9;, &#x6DFB;&#x52A0;&#x5230;&#x5C3E;&#x90E8;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x81EA;&#x65CB;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>\n        <span class="token comment">// tail&#x4E3A;&#x7A7A;,&#x8868;&#x793A;&#x961F;&#x5217;&#x672A;&#x521D;&#x59CB;&#x5316;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// &#x4E3A;&#x5934;&#x90E8;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;Node</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token comment">// &#x6210;&#x529F;&#x521D;&#x59CB;&#x5316;,&#x5219;&#x8BBE;&#x5934;&#x5C3E;&#x4E00;&#x81F4;,&#x6765;&#x8FDB;&#x884C;&#x540E;&#x7EED;&#x7684;&#x5165;&#x961F;&#x64CD;&#x4F5C;</span>\n                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// &#x5C1D;&#x8BD5;&#x5C06;Node&#x5165;&#x961F;&#x5C3E;,&#x76F4;&#x81F3;&#x6210;&#x529F;</span>\n            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>\n                <span class="token comment">// &#x6210;&#x529F;&#x5219;&#x8FD4;&#x56DE;&#x539F;&#x961F;&#x5C3E;</span>\n                <span class="token keyword">return</span> t<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="addwaiternode">addWaiter(Node)</h3>\n\n<ul>\n<li><code>private Node addWaiter(Node mode)</code></li>\n<li>&#x4E3A;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;Node,&#x5C06;&#x5176;&#x5165;&#x961F;&#x5E76;&#x8BBE;&#x7F6E;&#x4E3A;&#x6307;&#x5B9A;&#x7684;&#x6A21;&#x5F0F;(&#x72EC;&#x5360;/&#x5171;&#x4EAB;)</li>\n<li>mode:&#x72EC;&#x5360;(<a href="#exclusive">Node.EXCLUSIVE</a>)&#x6216;&#x5171;&#x4EAB;(<a href="#shared">Node.SHARED</a>)</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x6839;&#x636E;&#x6A21;&#x5F0F;&#x521B;&#x5EFA;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;Node</span>\n    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>\n    <span class="token comment">// &#x5C3E;&#x90E8;&#x4E0D;&#x4E3A;&#x7A7A;,&#x5DF2;&#x521D;&#x59CB;&#x5316;,&#x5219;&#x5C1D;&#x8BD5;&#x5165;&#x961F;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>\n            <span class="token comment">// CAS&#x5165;&#x961F;&#x6210;&#x529F;&#x540E;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x5373;&#x53EF;</span>\n            <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// &#x961F;&#x5217;&#x672A;&#x521D;&#x59CB;&#x5316;&#x6216;&#x5165;&#x961F;&#x5931;&#x8D25;,&#x5219;&#x81EA;&#x65CB;&#x5165;&#x961F;</span>\n    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="setheadnode">setHead(Node)</h3>\n\n<ul>\n<li><code>private void setHead(Node node)</code></li>\n<li>&#x8BBE;&#x7F6E;&#x540C;&#x6B65;&#x961F;&#x5217;&#x7684;&#x5934;&#x8282;&#x70B9;,&#x4EC5;&#x5728;<code>,</code>,``&#x65B9;&#x6CD5;&#x4E2D;&#x8C03;&#x7528;</li>\n<li>&#x521D;&#x59CB;&#x5316;&#x5934;&#x90E8;,&#x5E76;&#x4F1A;&#x5C06;&#x591A;&#x4F59;&#x7684;&#x503C;&#x6E05;&#x7A7A;(node.thread, node.prev)</li>\n<li>&#x6E05;&#x7A7A;:&#x4FBF;&#x4E8E;GC,&#x53CA;&#x6291;&#x5236;&#x4E0D;&#x5FC5;&#x8981;&#x7684;signals&#x53CA;&#x904D;&#x5386;</li>\n</ul>\n<h3 class="mume-header" id="unparksuccessornode">unparkSuccessor(Node)</h3>\n\n<ul>\n<li><code>private void unparkSuccessor(Node node)</code></li>\n<li>&#x5524;&#x9192;node&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x4E0D;&#x4E3A;null&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;,&#x5982;&#x679C;&#x6CA1;&#x6709;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x5219;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x64CD;&#x4F5C;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/*\n      * If status is negative (i.e., possibly needing signal) try\n      * to clear in anticipation of signalling.  It is OK if this\n      * fails or if status is changed by waiting thread.\n      */</span>\n    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>\n    <span class="token comment">// &#x72B6;&#x6001;&#x503C;&#x5C0F;&#x4E8E;0&#x8868;&#x793A;&#x4ECD;&#x5728;&#x7B49;&#x5F85;&#x7EBF;&#x7A0B;&#x8C03;&#x5EA6;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token comment">// &#x5C06;&#x8BE5;&#x8282;&#x70B9;&#x72B6;&#x6001;&#x8BBE;&#x4E3A;&#x96F6;,&#x8868;&#x793A;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;</span>\n        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/*\n      * Thread to unpark is held in successor, which is normally\n      * just the next node.  But if cancelled or apparently null,\n      * traverse backwards from tail to find the actual\n      * non-cancelled successor.\n      */</span>\n    <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token comment">// &#x5148;&#x5224;&#x65AD;&#x540E;&#x7EE7;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x662F;&#x5426;&#x5B58;&#x5728;&#x4E14;&#x6CA1;&#x6709;&#x53D6;&#x6D88;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token comment">// &#x4ECE;tail&#x5411;&#x524D;&#x67E5;&#x627E;&#xFF0C;&#x53BB;&#x9664;&#x961F;&#x5217;&#x4E2D;&#x5DF2;&#x7ECF;&#x53D6;&#x6D88;&#x7684;&#x8282;&#x70B9;</span>\n        <span class="token comment">// &#x5982;&#x679C;node&#x662F;&#x5C3E;&#x8282;&#x70B9;,&#x8FD9;&#x91CC;&#x4F1A;&#x76F4;&#x63A5;&#x8DF3;&#x51FA;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                s <span class="token operator">=</span> t<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// &#x5982;&#x679C;node&#x6709;&#x6CA1;&#x88AB;&#x53D6;&#x6D88;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;,&#x5219;&#x8FDB;&#x884C;&#x5524;&#x9192;&#x64CD;&#x4F5C;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="doreleaseshared">doReleaseShared()</h3>\n\n<ul>\n<li><code>private void doReleaseShared()</code></li>\n<li>&#x6210;&#x529F;&#x91CA;&#x653E;&#x9501;,&#x4F1A;&#x8C03;&#x7528;<a href="#unparksuccessornode">unparkSuccessor(Node)</a>&#x6765;&#x901A;&#x77E5;&#x540E;&#x7EED;&#x8282;&#x70B9;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x81EA;&#x65CB;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token comment">// &#x68C0;&#x67E5;&#x961F;&#x5217;&#x4E3A;&#x662F;&#x5426;&#x4E3A;&#x7A7A;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>\n            <span class="token comment">// &#x68C0;&#x67E5;&#x5934;&#x8282;&#x70B9;&#x7684;&#x72B6;&#x6001;&#x662F;&#x5426;&#x4E3A;SIGNAL,&#x5373;&#x662F;&#x5426;&#x9700;&#x8981;&#x901A;&#x77E5;&#x540E;&#x7EED;&#x8282;&#x70B9;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// &#x5C1D;&#x8BD5;CAS&#x6539;&#x53D8;&#x72B6;&#x6001;,&#x4E0D;&#x6210;&#x529F;&#x5219;&#x518D;&#x6B21;&#x5FAA;&#x73AF;&#x5C1D;&#x8BD5;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token comment">// loop to recheck cases</span>\n                <span class="token comment">// &#x6210;&#x529F;&#x7684;&#x8BDD;,&#x5219;&#x8C03;&#x7528;unparkSuccessor(head)&#x53BB;&#x901A;&#x77E5;&#x540E;&#x7EED;&#x8282;&#x70B9;</span>\n                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">/* &#x5982;&#x679C;&#x5934;&#x90E8;&#x72B6;&#x6001;&#x4E3A;0,&#x5219;&#x8BF4;&#x660E;&#x540E;&#x7EED;&#x8282;&#x70B9;&#x6B63;&#x5728;&#x88AB;&#x5524;&#x9192;/&#x5DF2;&#x7ECF;&#x88AB;&#x5524;&#x9192;&#xFF0C;\n             * &#x6B64;&#x65F6;&#x4E3A;&#x4E86;&#x9632;&#x6B62;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x83B7;&#x53D6;&#x9501;&#x5931;&#x8D25;&#xFF0C;&#x5BFC;&#x81F4;&#x5934;&#x90E8;&#x8282;&#x70B9;&#x53C8;&#x88AB;&#x8BBE;&#x4E3A;\n             * SIGNAL&#x5E76;&#x963B;&#x585E;,&#x5219;&#x5C06;&#x5934;&#x90E8;&#x8282;&#x70B9;&#x7684;&#x72B6;&#x6001;&#x8BBE;&#x4E3A;PROPAGATE,&#x5373;&#x5171;&#x4EAB;\n             * &#x72B6;&#x6001;,&#x8FD9;&#x6837;&#x5C31;&#x4E0D;&#x4F1A;&#x963B;&#x585E;&#x540E;&#x7EED;&#x8282;&#x70B9;\n             */</span>\n            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n                      <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>PROPAGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token comment">// &#x4E0D;&#x6210;&#x529F;&#x5219;&#x5FAA;&#x73AF;&#x518D;&#x6B21;&#x5C1D;&#x8BD5;</span>\n                <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment">// loop on failed CAS</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// &#x5224;&#x65AD;&#x961F;&#x5217;&#x5934;&#x90E8;&#x662F;&#x5426;&#x53D1;&#x751F;&#x53D8;&#x5316;(&#x5982;&#x521D;&#x59CB;&#x5316;&#x64CD;&#x4F5C;,&#x6216;&#x8005;&#x5934;&#x90E8;&#x53D8;&#x66F4;&#x64CD;&#x4F5C;)</span>\n        <span class="token comment">// &#x53EA;&#x6709;&#x5934;&#x90E8;&#x6CA1;&#x53D1;&#x751F;&#x53D8;&#x5316;&#x624D;&#x4F1A;&#x9000;&#x51FA;&#x5FAA;&#x73AF;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>                   <span class="token comment">// loop if head changed</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="setheadandpropagatenode-int">setHeadAndPropagate(Node, int)</h3>\n\n<ul>\n<li><code>private void setHeadAndPropagate(Node node, int propagate)</code></li>\n<li>&#x4E3A;&#x540C;&#x6B65;&#x961F;&#x5217;&#x8BBE;&#x7F6E;head,</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> propagate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// Record old head for check below</span>\n    <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>propagate <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> h <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>\n        <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="cancelacquirenode">cancelAcquire(Node)</h3>\n\n<ul>\n<li><code>private void cancelAcquire(Node node)</code></li>\n<li>&#x53D6;&#x6D88;node&#x7684;&#x6B63;&#x5728;&#x8FDB;&#x884C;&#x7684;&#x5C1D;&#x8BD5;,&#x4F8B;&#x5982;&#x83B7;&#x53D6;&#x540C;&#x6B65;&#x9501;&#x7B49;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x8282;&#x70B9;&#x4E0D;&#x5B58;&#x5728;&#x5219;&#x5FFD;&#x7565;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token comment">// &#x89E3;&#x9664;&#x8282;&#x70B9;&#x4E0E;&#x7EBF;&#x7A0B;&#x95F4;&#x7684;&#x5173;&#x7CFB;</span>\n    node<span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token comment">// &#x627E;&#x5230;&#x7B2C;&#x4E00;&#x4E2A;&#x672A;&#x88AB;cancelled&#x7684;&#x524D;&#x9A71;&#x8282;&#x70B9;</span>\n    <span class="token class-name">Node</span> pred <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> predNext <span class="token operator">=</span> pred<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token comment">// &#x5C06;&#x8BE5;node&#x7684;&#x72B6;&#x6001;&#x8BBE;&#x4E3A;CANCELLED,&#x5728;&#x5E76;&#x53D1;&#x4E2D;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x7684;&#x64CD;&#x4F5C;&#x4F1A;&#x8DF3;&#x8FC7;&#x8BE5;&#x8282;&#x70B9;,&#x540C;&#x65F6;&#x4E5F;&#x4F1A;&#x89E3;&#x9664;&#x4E0E;&#x5176;&#x4ED6;&#x8282;&#x70B9;&#x95F4;&#x7684;&#x5F15;&#x7528;</span>\n    node<span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CANCELLED<span class="token punctuation">;</span>\n    <span class="token comment">// &#x5224;&#x65AD;&#x8BE5;&#x8282;&#x70B9;&#x662F;&#x5426;&#x4E3A;&#x961F;&#x5C3E;,&#x5982;&#x679C;&#x662F;&#x5219;&#x5C06;&#x524D;&#x9A71;&#x8282;&#x70B9;&#x8BBE;&#x4E3A;&#x961F;&#x5C3E;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> tail <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> pred<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// &#x8BBE;&#x7F6E;&#x6210;&#x529F;&#x540E;,&#x5C06;&#x524D;&#x9A71;&#x8282;&#x70B9;&#x7684;next&#x8BBE;&#x4E3A;null,&#x89E3;&#x9664;&#x4E0E;&#x8BE5;node&#x95F4;&#x7684;&#x5F15;&#x7528;</span>\n        <span class="token function">compareAndSetNext</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> predNext<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> ws<span class="token punctuation">;</span>\n        <span class="token comment">// pred != head: &#x5224;&#x65AD;node&#x662F;&#x5426;&#x4E3A;head&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;</span>\n        <span class="token comment">// ws == Node.SIGNAL:&#x5224;&#x65AD;node&#x7684;&#x524D;&#x7EE7;&#x8282;&#x70B9;&#x662F;&#x5426;&#x662F;SIGNAL&#x72B6;&#x6001;</span>\n        <span class="token comment">// ws&#x4E0D;&#x4E3A;SIGNAL,&#x5219;&#x5C06;&#x5176;&#x72B6;&#x6001;&#x8F6C;&#x4E3A;SIGNAL</span>\n        <span class="token comment">// node&#x7684;&#x524D;&#x7EE7;&#x8282;&#x70B9;&#x7684;&#x7EBF;&#x7A0B;&#x4E0D;&#x4E3A;&#x7A7A;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> head <span class="token operator">&amp;&amp;</span>\n            <span class="token punctuation">(</span><span class="token punctuation">(</span>ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL <span class="token operator">||</span>\n              <span class="token punctuation">(</span>ws <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n            pred<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// &#x6EE1;&#x8DB3;&#x4EE5;&#x4E0A;&#x6761;&#x4EF6;,&#x5219;&#x5C06;node&#x7684;&#x524D;&#x7EE7;&#x8282;&#x70B9;&#x6307;&#x5411;node&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;</span>\n            <span class="token class-name">Node</span> next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> next<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n                <span class="token function">compareAndSetNext</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> predNext<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token comment">// &#x8BF4;&#x660E;node&#x662F;head&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;,&#x90A3;&#x4E48;&#x8C03;&#x7528;unparkSuccessor(Node)&#x65B9;&#x6CD5;&#x53BB;&#x5524;&#x9192;node&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;</span>\n            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// </span>\n        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span> <span class="token comment">// help GC</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="shouldparkafterfailedacquirenode-node">shouldParkAfterFailedAcquire(Node, Node)</h3>\n\n<ul>\n<li><code>private static boolean shouldParkAfterFailedAcquire(Node pred, Node node)</code></li>\n<li>&#x68C0;&#x67E5;&#x5E76;&#x66F4;&#x65B0;&#x4E00;&#x4E2A;&#x83B7;&#x53D6;&#x5931;&#x8D25;(acquire failed)&#x7684;&#x8282;&#x70B9;&#x7684;&#x72B6;&#x6001;,&#x9700;&#x8981;&#x6EE1;&#x8DB3;<code>pred == node.prev</code></li>\n<li>&#x8FD4;&#x56DE;&#x503C;:node&#x7684;&#x7EBF;&#x7A0B;&#x662F;&#x5426;&#x9700;&#x8981;&#x9501;</li>\n</ul>\n<h3 class="mume-header" id="selfinterrupt">selfInterrupt()</h3>\n\n<ul>\n<li><code>static void selfInterrupt()</code></li>\n<li>&#x4E2D;&#x65AD;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;</li>\n</ul>\n<h3 class="mume-header" id="parkandcheckinterrupt">parkAndCheckInterrupt()</h3>\n\n<ul>\n<li><code>private final boolean parkAndCheckInterrupt()</code></li>\n<li>&#x5C06;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;park&#x6389;,&#x8FD4;&#x56DE;&#x8BE5;&#x7EBF;&#x7A0B;&#x662F;&#x5426;&#x5904;&#x5728;&#x4E2D;&#x65AD;&#x72B6;&#x6001;</li>\n</ul>\n<h3 class="mume-header" id="acquirequeuednode-int">acquireQueued(Node, int)</h3>\n\n<ul>\n<li>&#x4EE5;&#x72EC;&#x5360;&#x4E0D;&#x53EF;&#x4E2D;&#x65AD;&#x6A21;&#x5F0F;&#x83B7;&#x53D6;&#x5DF2;&#x7ECF;&#x5728;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x7EBF;&#x7A0B;</li>\n<li>&#x5982;&#x679C;&#x5728;&#x7B49;&#x5F85;&#x65F6;&#x88AB;&#x4E2D;&#x65AD;&#x5219;&#x8FD4;&#x56DE;true,&#x5426;&#x5219;&#x8FD4;&#x56DE;false</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x5224;&#x65AD;&#x662F;&#x5426;&#x5931;&#x8D25;</span>\n    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token comment">// &#x7528;&#x4E8E;&#x5224;&#x65AD;&#x7EBF;&#x7A0B;&#x662F;&#x5426;&#x4E2D;&#x65AD;</span>\n        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// &#x5982;&#x679C;node&#x7684;&#x524D;&#x9A71;&#x662F;head,&#x5219;&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x9501;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// &#x6210;&#x529F;&#x5219;&#x5C06;node&#x8BBE;&#x4E3A;&#x5934;,&#x5E76;&#x5C06;&#x524D;&#x9A71;&#x8282;&#x70B9;&#x89E3;&#x9664;&#x5F15;&#x7528;</span>\n                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>\n                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// &#x8BF4;&#x660E;&#x524D;&#x9A71;&#x8282;&#x70B9;&#x4E0D;&#x662F;&#x5934;&#x8282;&#x70B9;,&#x90A3;&#x4E48;&#x83B7;&#x53D6;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n      <span class="token comment">// &#x5982;&#x679C;&#x4E2D;&#x9014;&#x629B;&#x51FA;&#x5F02;&#x5E38;,&#x5982;&#x83B7;&#x53D6;&#x524D;&#x9A71;&#x8282;&#x70B9;&#x4F1A;&#x629B;&#x51FA;NullPointerException,</span>\n      <span class="token comment">// &#x5219;&#x64CD;&#x4F5C;&#x5931;&#x8D25;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>\n            <span class="token comment">// &#x53D6;&#x6D88;node&#x7684;&#x5C1D;&#x8BD5;&#x64CD;&#x4F5C;</span>\n            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="doacquireinterruptiblyint">doAcquireInterruptibly(int)</h3>\n\n<ul>\n<li><code>private void doAcquireInterruptibly(int arg) throws InterruptedException</code></li>\n<li>&#x5728;&#x72EC;&#x5360;&#x53EF;&#x4E2D;&#x65AD;&#x6A21;&#x5F0F;&#x4E0B;&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x9501;,&#x4E0E;acquireQueued&#x7C7B;&#x4F3C;,&#x53EA;&#x4E0D;&#x8FC7;<code>interrupted = true;</code>&#x8FD9;&#x4E00;&#x6B65;&#x53D8;&#x6210;&#x4E86;&#x629B;&#x51FA;<code>InterruptedException</code>&#x5F02;&#x5E38;</li>\n</ul>\n<h3 class="mume-header" id="doacquirenanosint-long">doAcquireNanos(int, long)</h3>\n\n<ul>\n<li><code>private boolean doAcquireNanos(int arg, long nanosTimeout) throws InterruptedException</code></li>\n<li><code>doAcquireInterruptibly(int)</code>&#x7684;&#x5E26;&#x6709;&#x8D85;&#x65F6;&#x9650;&#x5236;&#x7684;&#x7248;&#x672C;,&#x5982;&#x679C;&#x8F93;&#x5165;&#x7684;&#x65F6;&#x95F4;&#x4E3A;&#x975E;&#x6B63;&#x6570;,&#x5219;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;</li>\n</ul>\n<h3 class="mume-header" id="doacquiresharedint">doAcquireShared(int)</h3>\n\n<ul>\n<li><code>private void doAcquireShared(int arg)</code></li>\n<li>&#x5728;<code>SHARED</code>&#x6A21;&#x5F0F;&#x4E0B;&#x83B7;&#x53D6;&#x9501;</li>\n</ul>\n<h3 class="mume-header" id="doacquiresharedinterruptiblyint">doAcquireSharedInterruptibly(int)</h3>\n\n<ul>\n<li><code>private void doAcquireSharedInterruptibly(int arg) throws InterruptedException</code></li>\n<li>&#x4E0E;<code>doAcquireShared(int)</code>&#x7C7B;&#x4F3C;,&#x4F1A;&#x629B;&#x51FA;&#x4E2D;&#x65AD;&#x5F02;&#x5E38;</li>\n</ul>\n<h3 class="mume-header" id="doacquiresharednanosint-long">doAcquireSharedNanos(int, long)</h3>\n\n<ul>\n<li><code>private boolean doAcquireSharedNanos(int arg, long nanosTimeout) throws InterruptedException</code></li>\n<li>&#x4E0E;<code>doAcquireSharedInterruptibly(int)</code>&#x7C7B;&#x4F3C;,&#x5E26;&#x6709;&#x8D85;&#x65F6;&#x9650;&#x5236;</li>\n</ul>\n<h3 class="mume-header" id="tryacquireint">tryAcquire(int)</h3>\n\n<ul>\n<li><code>protected boolean tryAcquire(int arg)</code></li>\n<li>&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x4E0B;&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x9501;,&#x5F53;&#x5B50;&#x7C7B;&#x652F;&#x6301;&#x72EC;&#x5360;&#x9501;&#x65F6;&#x9700;&#x8981;&#x5B9E;&#x73B0;&#x8BE5;&#x65B9;&#x6CD5;</li>\n</ul>\n<h3 class="mume-header" id="tryreleaseint">tryRelease(int)</h3>\n\n<ul>\n<li><code>protected boolean tryRelease(int arg)</code></li>\n<li>&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x4E0B;&#x5C1D;&#x8BD5;&#x91CA;&#x653E;&#x9501;,&#x5F53;&#x5B50;&#x7C7B;&#x652F;&#x6301;&#x72EC;&#x5360;&#x9501;&#x65F6;&#x9700;&#x8981;&#x5B9E;&#x73B0;&#x8BE5;&#x65B9;&#x6CD5;</li>\n</ul>\n<h3 class="mume-header" id="tryacquiresharedint">tryAcquireShared(int)</h3>\n\n<ul>\n<li><code>protected int tryAcquireShared(int arg)</code></li>\n<li>&#x5171;&#x4EAB;&#x6A21;&#x5F0F;&#x4E0B;&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x9501;,&#x5F53;&#x5B50;&#x7C7B;&#x652F;&#x6301;&#x5171;&#x4EAB;&#x6A21;&#x5F0F;&#x65F6;&#x9700;&#x8981;&#x5B9E;&#x73B0;&#x8BE5;&#x65B9;&#x6CD5;</li>\n</ul>\n<h3 class="mume-header" id="tryreleasesharedint">tryReleaseShared(int)</h3>\n\n<ul>\n<li><code>protected boolean tryReleaseShared(int arg)</code></li>\n<li>&#x5171;&#x4EAB;&#x6A21;&#x5F0F;&#x4E0B;&#x5C1D;&#x8BD5;&#x91CA;&#x653E;&#x9501;,&#x5F53;&#x5B50;&#x7C7B;&#x652F;&#x6301;&#x5171;&#x4EAB;&#x6A21;&#x5F0F;&#x65F6;&#x9700;&#x8981;&#x5B9E;&#x73B0;&#x8BE5;&#x65B9;&#x6CD5;</li>\n</ul>\n<h3 class="mume-header" id="isheldexclusively">isHeldExclusively()</h3>\n\n<ul>\n<li><code>protected boolean isHeldExclusively()</code></li>\n<li>&#x5F53;&#x8C03;&#x7528;&#x7EBF;&#x7A0B;&#x62E5;&#x6709;&#x72EC;&#x5360;&#x9501;&#x65F6;,&#x8FD4;&#x56DE;true</li>\n<li>&#x9700;&#x8981;&#x5B50;&#x7C7B;&#x5B9E;&#x73B0;</li>\n<li>&#x975E;&#x963B;&#x585E;&#x7684;Condition&#x4F1A;<a href="#signal-1">&#x8C03;&#x7528;</a>&#x8BE5;&#x65B9;&#x6CD5;,&#x963B;&#x585E;&#x7684;&#x4F1A;&#x8C03;&#x7528;<a href="#releaseint">release(int)</a></li>\n</ul>\n<h3 class="mume-header" id="acquireint">acquire(int)</h3>\n\n<ul>\n<li><code>public final void acquire(int arg)</code></li>\n<li>&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x83B7;&#x53D6;&#x9501;,&#x5B50;&#x7C7B;&#x83B7;&#x53D6;&#x9501;&#x90FD;&#x4F1A;&#x8C03;&#x7528;&#x8BE5;&#x65B9;&#x6CD5;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     *  &#x9996;&#x5148;&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x9501;,&#x5982;&#x679C;&#x6210;&#x529F;&#x5219;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;\n     *  &#x83B7;&#x53D6;&#x9501;&#x5931;&#x8D25;&#x540E;,&#x5C06;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x52A0;&#x5165;&#x5230;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;(&#x72EC;&#x5360;&#x6A21;&#x5F0F;)&#xFF0C;\n     *  &#x4E4B;&#x540E;&#x4E2D;&#x65AD;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7684;&#x6267;&#x884C;\n     */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="acquireinterruptiblyint">acquireInterruptibly(int)</h3>\n\n<ul>\n<li><code>public final void acquireInterruptibly(int arg) throws InterruptedException</code></li>\n<li>&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x83B7;&#x53D6;&#x9501;,&#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x5DF2;&#x7ECF;&#x5904;&#x5728;&#x4E2D;&#x65AD;&#x72B6;&#x6001;&#x5219;&#x629B;&#x51FA;<code>InterruptedException</code>,&#x5426;&#x5219;&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x9501;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="tryacquirenanosint-long">tryAcquireNanos(int, long)</h3>\n\n<ul>\n<li><code>public final boolean tryAcquireNanos(int arg, long nanosTimeout) throws InterruptedException</code></li>\n<li>&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x83B7;&#x53D6;&#x9501;,&#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x5DF2;&#x7ECF;&#x5904;&#x5728;&#x4E2D;&#x65AD;&#x72B6;&#x6001;&#x5219;&#x629B;&#x51FA;<code>InterruptedException</code>,&#x5982;&#x679C;&#x83B7;&#x53D6;&#x5230;&#x9501;&#x8FD4;&#x56DE;true,&#x8D85;&#x65F6;&#x8FD4;&#x56DE;false</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">||</span>\n        <span class="token function">doAcquireNanos</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="releaseint">release(int)</h3>\n\n<ul>\n<li><code>public final boolean release(int arg)</code></li>\n<li>&#x91CA;&#x653E;&#x9501;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x91CA;&#x653E;&#x9501;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// &#x91CA;&#x653E;&#x9501;&#x4E4B;&#x540E;,&#x9700;&#x8981;&#x5524;&#x9192;&#x5934;&#x8282;&#x70B9;&#x540E;&#x7684;&#x8282;&#x70B9;</span>\n        <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>\n        <span class="token comment">// &#x68C0;&#x67E5;head&#x7684;&#x72B6;&#x6001;,&#x4E3A;0&#x8868;&#x793A;&#x5DF2;&#x6709;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x64CD;&#x4F5C;&#x6765;&#x66F4;&#x6362;&#x8282;&#x70B9;&#x4E86;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token comment">// &#x8BF4;&#x660E;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x6CA1;&#x6709;&#x62A2;&#x5360;&#x64CD;&#x4F5C;,&#x90A3;&#x4E48;&#x5F00;&#x59CB;&#x5524;&#x9192;&#x540E;&#x7EED;&#x8282;&#x70B9;</span>\n            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// &#x65E0;&#x8BBA;&#x5982;&#x4F55;,&#x91CA;&#x653E;&#x9501;&#x6210;&#x529F;,&#x8FD4;&#x56DE;true</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// &#x4E0D;&#x6210;&#x529F;&#x8FD4;&#x56DE;false</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="acquiresharedint">acquireShared(int)</h3>\n\n<ul>\n<li><code>public final void acquireShared(int arg)</code></li>\n<li>&#x83B7;&#x53D6;&#x5171;&#x4EAB;&#x9501;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="acquiresharedinterruptiblyint">acquireSharedInterruptibly(int)</h3>\n\n<ul>\n<li><code>public final void acquireSharedInterruptibly(int arg) throws InterruptedException</code></li>\n<li>&#x83B7;&#x53D6;&#x5171;&#x4EAB;&#x9501;,&#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x5DF2;&#x7ECF;&#x4E2D;&#x65AD;&#x5219;&#x629B;&#x51FA;<code>InterruptedException</code>&#x5F02;&#x5E38;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="tryacquiresharednanosint-long">tryAcquireSharedNanos(int, long)</h3>\n\n<ul>\n<li><code>public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout) throws InterruptedException</code></li>\n<li>&#x5C1D;&#x8BD5;&#x83B7;&#x53D6;&#x5171;&#x4EAB;&#x9501;,&#x6709;&#x8D85;&#x65F6;&#x65F6;&#x95F4;,&#x83B7;&#x53D6;&#x5230;&#x9501;&#x8FD4;&#x56DE;true,&#x8D85;&#x65F6;&#x8FD4;&#x56DE;false</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquireSharedNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span>\n        <span class="token function">doAcquireSharedNanos</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="releasesharedint">releaseShared(int)</h3>\n\n<ul>\n<li><code>public final boolean releaseShared(int arg)</code></li>\n<li>&#x91CA;&#x653E;&#x5171;&#x4EAB;&#x9501;,&#x6210;&#x529F;&#x8FD4;&#x56DE;true,&#x5931;&#x8D25;&#x8FD4;&#x56DE;false</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="hasqueuedthreads">hasQueuedThreads()</h3>\n\n<ul>\n<li><code>public final boolean hasQueuedThreads()</code></li>\n<li>&#x5224;&#x65AD;&#x662F;&#x5426;&#x8FD8;&#x6709;&#x5728;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x7EBF;&#x7A0B;,&#x6709;&#x8FD4;&#x56DE;true,&#x6CA1;&#x6709;&#x8FD4;&#x56DE;false</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x9996;&#x5C3E;&#x76F8;&#x7B49;&#x5219;&#x6CA1;&#x6709;</span>\n    <span class="token keyword">return</span> head <span class="token operator">!=</span> tail<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="hascontended">hasContended()</h3>\n\n<ul>\n<li><code>public final boolean hasContended()</code></li>\n<li>&#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;&#x7EBF;&#x7A0B;&#x5728;&#x8FDB;&#x884C;&#x9501;&#x7ADE;&#x4E89;(&#x5373;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;&#x662F;&#x5426;&#x6709;&#x7EBF;&#x7A0B;),&#x6709;&#x8FD4;&#x56DE;true,&#x5426;&#x5219;&#x8FD4;&#x56DE;false</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasContended</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x5934;&#x8282;&#x70B9;&#x4E0D;&#x4E3A;null,&#x5219;&#x8BF4;&#x660E;&#x6709;&#x7EBF;&#x7A0B;&#x5728;&#x6267;&#x884C;&#x4E14;&#x540E;&#x7EED;&#x4E5F;&#x6709;&#x7EBF;&#x7A0B;&#x5728;&#x961F;&#x5217;&#x4E2D;</span>\n    <span class="token keyword">return</span> head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="getfirstqueuedthread">getFirstQueuedThread()</h3>\n\n<ul>\n<li><code>public final Thread getFirstQueuedThread()</code></li>\n<li>&#x83B7;&#x53D6;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;(&#x975E;head),&#x5982;&#x679C;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#x8FD4;&#x56DE;null</li>\n<li>&#x8BE5;&#x7EBF;&#x7A0B;&#x4E5F;&#x662F;&#x961F;&#x5217;&#x4E2D;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x6700;&#x4E45;&#x7684;&#x7EBF;&#x7A0B;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Thread</span> <span class="token function">getFirstQueuedThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// handle only fast path, else relay</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">fullGetFirstQueuedThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="fullgetfirstqueuedthread">fullGetFirstQueuedThread()</h3>\n\n<ul>\n<li><code>private Thread fullGetFirstQueuedThread()</code></li>\n<li>&#x83B7;&#x53D6;&#x5728;&#x961F;&#x5217;&#x4E2D;&#x6392;&#x7B2C;&#x4E00;&#x7684;&#x7EBF;&#x7A0B;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token class-name">Thread</span> <span class="token function">fullGetFirstQueuedThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">Node</span> h<span class="token punctuation">,</span> s<span class="token punctuation">;</span>\n    <span class="token class-name">Thread</span> st<span class="token punctuation">;</span>\n    <span class="token doc-comment comment">/**\n     *  &#x8BBE;h&#x4E3A;head,s&#x4E3A;head.next\n     *  &#x5982;&#x679C;h&#x4E0E;s&#x4E0D;&#x4E3A;null(&#x6709;&#x4EFB;&#x52A1;),&#x4E14;s&#x7684;prev&#x662F;head(&#x5224;&#x65AD;s&#x662F;&#x5426;&#x8FD8;&#x5728;&#x961F;&#x5217;&#x6216;&#x53D8;&#x6210;\n     *  &#x5934;&#x90E8;&#x6216;&#x6709;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x53D8;&#x4E3A;head),&#x4E14;s&#x6709;&#x7EBF;&#x7A0B;,&#x90A3;&#x4E48;&#x5C31;&#x628A;st&#x8FD4;&#x56DE;;\n     *  &#x7528;||&#x5224;&#x65AD;&#x4E24;&#x6B21;,&#x662F;&#x8FDB;&#x884C;&#x4E8C;&#x6B21;&#x6821;&#x9A8C;,&#x7B2C;&#x4E00;&#x6B21;&#x4E0D;&#x901A;&#x8FC7;&#x5219;&#x518D;&#x83B7;&#x53D6;&#x4E00;&#x6B21;\n     */</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n            s<span class="token punctuation">.</span>prev <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>st <span class="token operator">=</span> s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n        <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n            s<span class="token punctuation">.</span>prev <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>st <span class="token operator">=</span> s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> st<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * &#x5934;&#x8282;&#x70B9;&#x7684;next&#x53EF;&#x80FD;&#x672A;&#x8BBE;&#x7F6E;&#x5B8C;,&#x6216;&#x53EF;&#x80FD;&#x8FD8;&#x5904;&#x5728;setHead()&#x65B9;&#x6CD5;&#x4E2D;\n     * &#x6240;&#x4EE5;&#x4ECE;tail&#x5904;&#x5F00;&#x59CB;&#x5411;&#x524D;&#x627E;&#x5230;head&#x540E;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;,&#x5C06;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x7EBF;&#x7A0B;&#x8FD4;&#x56DE;\n     */</span>\n    <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>\n    <span class="token class-name">Thread</span> firstThread <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Thread</span> tt <span class="token operator">=</span> t<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>tt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n            firstThread <span class="token operator">=</span> tt<span class="token punctuation">;</span>\n        t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> firstThread<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="isqueuedthread">isQueued(Thread)</h3>\n\n<ul>\n<li><code>public final boolean isQueued(Thread thread)</code></li>\n<li>&#x5224;&#x65AD;&#x6307;&#x5B9A;&#x7EBF;&#x7A0B;&#x662F;&#x5426;&#x5728;&#x961F;&#x5217;&#x4E2D;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isQueued</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x5148;&#x6821;&#x9A8C;&#x662F;&#x5426;&#x4E3A;&#x7A7A;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// &#x4ECE;tail&#x5411;&#x524D;&#x904D;&#x5386;&#xFF0C;&#x5C1D;&#x8BD5;&#x627E;&#x5230;&#x8BE5;&#x7EBF;&#x7A0B;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> p <span class="token operator">=</span> tail<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>thread <span class="token operator">==</span> thread<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="apparentlyfirstqueuedisexclusive">apparentlyFirstQueuedIsExclusive()</h3>\n\n<ul>\n<li><code>final boolean apparentlyFirstQueuedIsExclusive()</code></li>\n<li>&#x5224;&#x65AD;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x9996;&#x4E2A;&#x8282;&#x70B9;&#x662F;&#x5426;&#x4E3A;&#x72EC;&#x5360;&#x6A21;&#x5F0F;,&#x4EC5;&#x5728;&#x961F;&#x5217;&#x4E0D;&#x4E3A;&#x7A7A;&#x3001;&#x961F;&#x5217;&#x5185;&#x6709;&#x8282;&#x70B9;(&#x4EFB;&#x52A1;,&#x7EBF;&#x7A0B;)&#x3001;head&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x4E3A;&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x3001;&#x8BE5;&#x8282;&#x70B9;&#x6709;&#x7EBF;&#x7A0B;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x4E3A;true</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">apparentlyFirstQueuedIsExclusive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Node</span> h<span class="token punctuation">,</span> s<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span>  <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token operator">&amp;&amp;</span>\n        s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="hasqueuedpredecessors">hasQueuedPredecessors()</h3>\n\n<ul>\n<li>&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;&#x6BD4;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x7B49;&#x5F85;&#x8FD8;&#x8981;&#x4E45;&#x7684;&#x7EBF;&#x7A0B;,&#x5B58;&#x5728;&#x8FD4;&#x56DE;true,&#x4E0D;&#x5B58;&#x5728;&#x8FD4;&#x56DE;false</li>\n<li>&#x7528;&#x4E8E;&#x516C;&#x5E73;&#x9501;,&#x6309;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x5206;&#x914D;&#x9501;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> s<span class="token punctuation">;</span>\n    <span class="token comment">// &#x961F;&#x5217;&#x4E3A;&#x7A7A;,&#x5219;&#x4E00;&#x5B9A;&#x4E0D;&#x5B58;&#x5728;</span>\n    <span class="token comment">// &#x5934;&#x8282;&#x70B9;&#x4E4B;&#x540E;&#x4E3A;null,&#x5219;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#x6216;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5728;&#x8FD0;&#x884C;&#x7684;&#x7EBF;&#x7A0B;,&#x90A3;&#x4E48;&#x4E5F;&#x5B58;&#x5728;(&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x672A;&#x5165;&#x961F;,&#x6709;&#x7EBF;&#x7A0B;&#x5DF2;&#x5165;&#x961F;&#x4E14;&#x5728;&#x6267;&#x884C;)</span>\n    <span class="token comment">// head&#x540E;&#x7684;&#x9996;&#x4E2A;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x7684;&#x7EBF;&#x7A0B;&#x4E0D;&#x4E3A;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;,&#x90A3;&#x4E48;&#x5B58;&#x5728;</span>\n    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span>\n        <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="getqueuelength">getQueueLength()</h3>\n\n<ul>\n<li>&#x4ECE;&#x961F;&#x5C3E;&#x904D;&#x5386;&#x5230;&#x961F;&#x5934;,&#x83B7;&#x53D6;&#x961F;&#x5217;&#x957F;&#x5EA6;</li>\n<li>&#x65B9;&#x6CD5;&#x83B7;&#x5F97;&#x7684;&#x961F;&#x5217;&#x957F;&#x5EA6;&#x503C;&#x4E00;&#x5B9A;&#x5C0F;&#x4E8E;&#x5B9E;&#x9645;&#x961F;&#x5217;&#x957F;&#x5EA6;,&#x5904;&#x5728;&#x53D6;&#x6D88;&#x72B6;&#x6001;&#x7684;&#x8282;&#x70B9;thread&#x4E3A;null</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getQueueLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> p <span class="token operator">=</span> tail<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>thread <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n            <span class="token operator">++</span>n<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="getqueuedthreads">getQueuedThreads()</h3>\n\n<ul>\n<li>&#x83B7;&#x53D6;&#x5728;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x7EBF;&#x7A0B;&#x96C6;&#x5408;,ArrayList</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> <span class="token function">getQueuedThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> p <span class="token operator">=</span> tail<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Thread</span> t <span class="token operator">=</span> p<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> list<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="getexclusivequeuedthreads">getExclusiveQueuedThreads()</h3>\n\n<ul>\n<li>&#x83B7;&#x53D6;&#x5728;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x7684;&#x7EBF;&#x7A0B;&#x96C6;&#x5408;,ArrayList</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> <span class="token function">getExclusiveQueuedThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> p <span class="token operator">=</span> tail<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span> t <span class="token operator">=</span> p<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> list<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="getsharedqueuedthreads">getSharedQueuedThreads()</h3>\n\n<ul>\n<li>&#x83B7;&#x53D6;&#x5728;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x5171;&#x4EAB;&#x6A21;&#x5F0F;&#x7684;&#x7EBF;&#x7A0B;&#x96C6;&#x5408;,ArrayList</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSharedQueuedThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> p <span class="token operator">=</span> tail<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span> t <span class="token operator">=</span> p<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> list<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="isonsyncqueuenode">isOnSyncQueue(Node)</h3>\n\n<ul>\n<li>&#x5224;&#x65AD;&#x6307;&#x5B9A;&#x8282;&#x70B9;&#x662F;&#x5426;&#x5728;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;</li>\n<li>&#x76F8;&#x5173;:\n<ul>\n<li><a href="#findnodefromtailnode">findNodeFromTail(Node)</a></li>\n</ul>\n</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x5224;&#x65AD;&#x8282;&#x70B9;&#x7684;&#x7B49;&#x5F85;&#x72B6;&#x6001;&#x662F;&#x5426;&#x4E3A;CONDITION,&#x6761;&#x4EF6;&#x961F;&#x5217;&#x4E0D;&#x662F;&#x540C;&#x6B65;&#x961F;&#x5217;</span>\n    <span class="token comment">// &#x5224;&#x65AD;node&#x662F;&#x5426;&#x6709;&#x524D;&#x7EE7;&#x8282;&#x70B9;,&#x6CA1;&#x6709;&#x5219;&#x8BF4;&#x660E;&#x4E3A;head&#x6216;&#x4E0D;&#x5728;&#x961F;&#x5217;&#x4E2D;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>waitStatus <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION <span class="token operator">||</span> node<span class="token punctuation">.</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// &#x8D70;&#x5230;&#x8FD9;&#x91CC;&#x8BF4;&#x660E;head&#x6709;&#x524D;&#x7EE7;&#x8282;&#x70B9;,&#x5982;&#x679C;&#x6709;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x90A3;&#x4E00;&#x5B9A;&#x5728;&#x961F;&#x5217;&#x91CC;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token comment">// &#x5982;&#x679C;&#x6CA1;&#x6709;&#x540E;&#x7EE7;&#x8282;&#x70B9;,&#x53EF;&#x80FD;&#x662F;&#x56E0;&#x4E3A;CAS&#x6B63;&#x5728;&#x6267;&#x884C;&#x5165;&#x961F;&#x64CD;&#x4F5C;,&#x90A3;&#x4E48;&#x5C31;&#x6267;&#x884C;&#x8BE5;&#x65B9;&#x6CD5;&#x4ECE;&#x5C3E;&#x90E8;&#x5411;&#x524D;&#x904D;&#x5386;&#x67E5;&#x627E;</span>\n    <span class="token keyword">return</span> <span class="token function">findNodeFromTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="findnodefromtailnode">findNodeFromTail(Node)</h3>\n\n<ul>\n<li>&#x4ECE;tail&#x67E5;&#x627E;&#x6307;&#x5B9A;Node&#x662F;&#x5426;&#x5728;&#x961F;&#x5217;&#x4E2D;,&#x5B58;&#x5728;&#x8FD4;&#x56DE;true,&#x4E0D;&#x5B58;&#x5728;&#x8FD4;&#x56DE;false</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">findNodeFromTail</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> node<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="transferforsignalnode">transferForSignal(Node)</h3>\n\n<ul>\n<li>&#x5C06;&#x4E00;&#x4E2A;&#x5728;&#x6761;&#x4EF6;&#x961F;&#x5217;(<a href="#condition">Node.CONDITION</a>)&#x7684;&#x8282;&#x70B9;&#x52A0;&#x5165;&#x5230;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;,&#x6210;&#x529F;&#x8FD4;&#x56DE;true,&#x5931;&#x8D25;&#x8FD4;&#x56DE;false</li>\n<li>&#x76F8;&#x5173;:\n<ul>\n<li><a href="#enqnode">enq(Node)</a></li>\n<li><a href="#dosignalnode">doSignal(Node)</a></li>\n</ul>\n</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferForSignal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x5C1D;&#x8BD5;&#x5C06;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x72B6;&#x6001;&#x53D8;&#x4E3A;0,&#x5373;&#x521D;&#x59CB;&#x5316;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// &#x5C06;&#x5176;&#x5165;&#x961F;</span>\n    <span class="token class-name">Node</span> p <span class="token operator">=</span> <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> ws <span class="token operator">=</span> p<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>\n    <span class="token comment">// &#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x88AB;&#x53D6;&#x6D88;&#x6216;&#x6539;&#x53D8;&#x72B6;&#x6001;&#x5931;&#x8D25;,&#x5219;&#x5524;&#x9192;&#x8BE5;&#x7EBF;&#x7A0B;,&#x4F7F;&#x5176;&#x91CD;&#x65B0;&#x540C;&#x6B65;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="transferaftercancelledwaitnode">transferAfterCancelledWait(Node)</h3>\n\n<ul>\n<li>&#x5C06;&#x6307;&#x5B9A;&#x8282;&#x70B9;&#x4ECE;&#x6761;&#x4EF6;&#x961F;&#x5217;&#x79FB;&#x5230;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;,&#x6210;&#x529F;&#x8FD4;&#x56DE;true,&#x5DF2;&#x5728;&#x961F;&#x5217;&#x8FD4;&#x56DE;false</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferAfterCancelledWait</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token doc-comment comment">/** &#x5982;&#x679C;&#x8F6C;&#x53D8;&#x4E0D;&#x6210;&#x529F;,&#x8BF4;&#x660E;&#x53EF;&#x80FD;&#x88AB;signal()&#x65B9;&#x6CD5;&#x62A2;&#x5360;,\n     *  &#x90A3;&#x4E48;&#x5C31;&#x9700;&#x8981;&#x7B49;&#x5F85;enq()&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x5B8C;&#x6210;&#x3002;\n     *  &#x8FD9;&#x79CD;&#x72B6;&#x51B5;&#x7F55;&#x89C1;&#x4E14;&#x77ED;&#x6682;,&#x6240;&#x4EE5;&#x901A;&#x8FC7;&#x81EA;&#x65CB;&#x7684;&#x65B9;&#x5F0F;&#x7B49;&#x5F85;&#x5165;&#x961F;&#x5373;&#x53EF;\n     */</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="fullyreleasenode">fullyRelease(Node)</h3>\n\n<ul>\n<li>&#x5B8C;&#x5168;&#x91CA;&#x653E;&#x5934;&#x8282;&#x70B9;&#x6301;&#x6709;&#x7684;&#x9501;,&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x4E4B;&#x524D;&#x7684;&#x540C;&#x6B65;&#x72B6;&#x6001;&#x503C;(state),&#x5931;&#x8D25;&#x4F1A;&#x629B;&#x51FA;<code>IllegalMonitorStateException</code>,&#x4E14;&#x4F1A;&#x5C06;&#x53C2;&#x6570;&#x8282;&#x70B9;&#x7684;&#x72B6;&#x6001;&#x8BBE;&#x4E3A;<a href="#cancelled">CANCELLED</a></li>\n<li>node:&#x6B63;&#x5728;&#x7B49;&#x5F85;&#x91CA;&#x653E;&#x9501;&#x7684;&#x6761;&#x4EF6;&#x8282;&#x70B9;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">release</span><span class="token punctuation">(</span>savedState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> savedState<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>\n            node<span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CANCELLED<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="ownsconditionobject">owns(ConditionObject)</h3>\n\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">owns</span><span class="token punctuation">(</span><span class="token class-name">ConditionObject</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> condition<span class="token punctuation">.</span><span class="token function">isOwnedBy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h2 class="mume-header" id="node">Node</h2>\n\n<ul>\n<li><code>static final class Node</code></li>\n<li>AQS&#x5185;&#x90E8;&#x7C7B;,&#x961F;&#x5217;&#x7684;&#x5355;&#x4F4D;</li>\n</ul>\n<h3 class="mume-header" id="shared">SHARED</h3>\n\n<ul>\n<li><code>static final Node SHARED = new Node();</code></li>\n<li>&#x5171;&#x4EAB;&#x6A21;&#x5F0F;&#x7684;&#x7B49;&#x5F85;&#x8282;&#x70B9;</li>\n<li>Semaphore&#x3001;CountDownLatch&#x3001;ReadWriteLock&#xFF0C;CyclicBarrier&#x662F;&#x5171;&#x4EAB;&#x6A21;&#x5F0F;,&#x53EF;&#x4EE5;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x6267;&#x884C;</li>\n</ul>\n<h3 class="mume-header" id="exclusive">EXCLUSIVE</h3>\n\n<ul>\n<li><code>static final Node EXCLUSIVE = null;</code></li>\n<li>&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x7684;&#x7B49;&#x5F85;&#x8282;&#x70B9;</li>\n<li>ReentrantLock&#x662F;&#x72EC;&#x5360;&#x6A21;&#x5F0F;,&#x540C;&#x65F6;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x53EF;&#x4EE5;&#x6267;&#x884C;</li>\n</ul>\n<h3 class="mume-header" id="cancelled">CANCELLED</h3>\n\n<ul>\n<li><code>static final int CANCELLED = 1;</code></li>\n<li>&#x8868;&#x793A;&#x8BE5;&#x8282;&#x70B9;&#x4E0A;&#x7684;&#x7EBF;&#x7A0B;&#x5DF2;&#x88AB;&#x53D6;&#x6D88;(&#x7B49;&#x5F85;&#x8D85;&#x65F6;&#x6216;&#x88AB;&#x4E2D;&#x65AD;&#x7B49;)</li>\n<li>&#x5904;&#x5728;&#x53D6;&#x6D88;&#x72B6;&#x6001;&#x7684;&#x7EBF;&#x7A0B;,&#x5C06;&#x4F1A;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x5254;&#x9664;</li>\n</ul>\n<h3 class="mume-header" id="signal">SIGNAL</h3>\n\n<ul>\n<li><code>static final int SIGNAL = -1;</code></li>\n<li>&#x8868;&#x793A;&#x8BE5;&#x8282;&#x70B9;&#x5DF2;&#x7ECF;&#x51C6;&#x5907;&#x597D;&#x4E86;,&#x7B49;&#x5F85;&#x8D44;&#x6E90;&#x91CA;&#x653E;&#x4EE5;&#x83B7;&#x5F97;&#x9501;</li>\n<li>&#x5F53;&#x524D;&#x7EE7;&#x8282;&#x70B9;&#x91CA;&#x653E;&#x8D44;&#x6E90;&#x540E;,&#x6807;&#x8BC6;&#x4E3A;SIGNAL&#x72B6;&#x6001;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x5C31;&#x4F1A;&#x83B7;&#x53D6;&#x9501;&#x5E76;&#x6267;&#x884C;</li>\n</ul>\n<h3 class="mume-header" id="condition">CONDITION</h3>\n\n<ul>\n<li><code>static final int CONDITION = -2;</code></li>\n<li>&#x8BE5;&#x6807;&#x8BC6;&#x7684;&#x7ED3;&#x70B9;&#x5904;&#x4E8E;&#x7B49;&#x5F85;&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x7ED3;&#x70B9;&#x7684;&#x7EBF;&#x7A0B;&#x7B49;&#x5F85;&#x5728;Condition&#x4E0A;&#xFF0C;&#x5F53;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x8C03;&#x7528;&#x4E86;Condition&#x7684;signal()&#x65B9;&#x6CD5;&#x540E;&#xFF0C;CONDITION&#x72B6;&#x6001;&#x7684;&#x7ED3;&#x70B9;&#x5C06;&#x4ECE;&#x7B49;&#x5F85;&#x961F;&#x5217;&#x8F6C;&#x79FB;&#x5230;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;&#xFF0C;&#x7B49;&#x5F85;&#x83B7;&#x53D6;&#x540C;&#x6B65;&#x9501;&#x3002;</li>\n</ul>\n<h3 class="mume-header" id="propagate">PROPAGATE</h3>\n\n<ul>\n<li><code>static final int PROPAGATE = -3;</code></li>\n<li>&#x8868;&#x793A;&#x8BE5;&#x8282;&#x70B9;&#x53CA;&#x540E;&#x7EED;&#x7EBF;&#x7A0B;&#x65E0;&#x6761;&#x4EF6;&#x4F20;&#x64AD;&#x4E0B;&#x53BB;</li>\n<li>&#x4EC5;&#x5728;&#x5171;&#x4EAB;&#x6A21;&#x5F0F;&#x4E0B;&#x6709;&#x6548;</li>\n</ul>\n<h3 class="mume-header" id="waitstatus">waitStatus</h3>\n\n<ul>\n<li><code>volatile int waitStatus;</code></li>\n<li>&#x8868;&#x793A;&#x8282;&#x70B9;&#x7684;&#x7B49;&#x5F85;&#x72B6;&#x6001;&#x6807;&#x5FD7;&#x4F4D;</li>\n<li>&#x5927;&#x4E8E;0&#x8868;&#x793A;&#x7EBF;&#x7A0B;&#x4E2D;&#x65AD;&#x6216;&#x8D85;&#x65F6;</li>\n<li>&#x5C0F;&#x4E8E;0&#x8868;&#x793A;&#x7EBF;&#x7A0B;&#x5728;&#x961F;&#x5217;&#x4E2D;&#x7B49;&#x5F85;&#x83B7;&#x53D6;&#x8D44;&#x6E90;</li>\n<li>&#x7B49;&#x4E8E;0&#x8868;&#x793A;&#x521A;&#x88AB;&#x521D;&#x59CB;&#x5316;</li>\n</ul>\n<h3 class="mume-header" id="prev">prev</h3>\n\n<ul>\n<li><code>volatile Node prev;</code></li>\n<li>&#x8868;&#x793A;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x524D;&#x7EE7;&#x8282;&#x70B9;</li>\n<li>&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x7528;&#x7684;&#x8282;&#x70B9;,&#x53CC;&#x5411;&#x961F;&#x5217;</li>\n</ul>\n<h3 class="mume-header" id="next">next</h3>\n\n<ul>\n<li><code>volatile Node next;</code></li>\n<li>&#x8868;&#x793A;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;</li>\n<li>&#x72EC;&#x5360;&#x6A21;&#x5F0F;&#x7528;&#x7684;&#x8282;&#x70B9;,&#x53CC;&#x5411;&#x961F;&#x5217;</li>\n<li>&#x5F53;head&#x4EFB;&#x52A1;&#x5B8C;&#x6210;&#x540E;,head.next&#x4E3A;null,&#x6240;&#x4EE5;AQS&#x4E2D;&#x7684;&#x904D;&#x5386;&#x90FD;&#x662F;&#x7531;tail&#x5411;&#x524D;&#x904D;&#x5386;&#x7684;</li>\n<li>&#x540C;&#x65F6;&#x7EBF;&#x7A0B;&#x5728;acquire&#x64CD;&#x4F5C;&#x5931;&#x8D25;&#x540E;&#x4F1A;&#x6267;&#x884C;<a href="#cancelacquirenode">cancelAcquire(Node)</a>,&#x6B64;&#x65F6;&#x4F1A;&#x5C06;&#x8BE5;&#x8282;&#x70B9;&#x7684;next&#x8BBE;&#x4E3A;&#x81EA;&#x8EAB;,&#x5982;&#x679C;&#x4ECE;tail&#x5012;&#x5E8F;&#x904D;&#x5386;&#x5219;&#x4E0D;&#x4F1A;&#x53D7;&#x5230;&#x5F71;&#x54CD;</li>\n</ul>\n<h3 class="mume-header" id="thread">thread</h3>\n\n<ul>\n<li><code>volatile Thread thread;</code></li>\n<li>&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7EBF;&#x7A0B;,&#x5728;&#x6784;&#x9020;&#x5668;&#x4E2D;&#x521D;&#x59CB;&#x5316;,&#x5728;&#x8282;&#x70B9;&#x4F7F;&#x7528;&#x5B8C;&#x4E4B;&#x540E;&#x8BBE;&#x4E3A;null</li>\n</ul>\n<h3 class="mume-header" id="nextwaiter">nextWaiter</h3>\n\n<ul>\n<li><code>Node nextWaiter;</code></li>\n<li>&#x6307;&#x5411;&#x4E0B;&#x4E00;&#x4E2A;&#x5904;&#x5728;<code>Condition</code>&#x4E0A;&#x7684;&#x6761;&#x4EF6;&#x961F;&#x5217;&#x7684;&#x8282;&#x70B9;,&#x5355;&#x5411;&#x961F;&#x5217;</li>\n</ul>\n<h3 class="mume-header" id="isshared">isShared()</h3>\n\n<ul>\n<li><code>final boolean isShared() { return nextWaiter == SHARED; }</code></li>\n<li>&#x5224;&#x65AD;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x662F;&#x5426;&#x5904;&#x5728;&#x5206;&#x4EAB;&#x6A21;&#x5F0F;&#x4E0B;&#x7B49;&#x5F85;,&#x5206;&#x4EAB;&#x6A21;&#x5F0F;&#x8FD4;&#x56DE;true</li>\n</ul>\n<h3 class="mume-header" id="predecessor">predecessor()</h3>\n\n<ul>\n<li><code>final Node predecessor() throws NullPointerException</code></li>\n<li>&#x83B7;&#x53D6;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x524D;&#x7EE7;&#x8282;&#x70B9;,&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;(&#x6216;&#x4E3A;null)&#x4F1A;&#x629B;&#x51FA;&#x7A7A;&#x6307;&#x9488;&#x5F02;&#x5E38;</li>\n</ul>\n<h2 class="mume-header" id="conditionobject">ConditionObject</h2>\n\n<ul>\n<li><code>public class ConditionObject implements Condition, java.io.Serializable</code></li>\n<li>AQS&#x5185;&#x90E8;&#x7C7B;,AQS&#x4E2D;Condition&#x7684;&#x5B9E;&#x73B0;,&#x540C;&#x65F6;&#x4E5F;&#x662F;Lock&#x5B9E;&#x73B0;&#x7684;&#x57FA;&#x7840;</li>\n</ul>\n<h3 class="mume-header" id="firstwaiter">firstWaiter</h3>\n\n<ul>\n<li><code>private transient Node firstWaiter;</code></li>\n<li>&#x6761;&#x4EF6;&#x961F;&#x5217;&#x5934;&#x8282;&#x70B9;</li>\n</ul>\n<h3 class="mume-header" id="lastwaiter">lastWaiter</h3>\n\n<ul>\n<li><code>private transient Node lastWaiter;</code></li>\n<li>&#x6761;&#x4EF6;&#x961F;&#x5217;&#x5C3E;&#x8282;&#x70B9;</li>\n</ul>\n<h3 class="mume-header" id="addconditionwaiter">addConditionWaiter()</h3>\n\n<ul>\n<li>&#x5728;&#x7B49;&#x5F85;&#x961F;&#x5217;&#x4E2D;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x65B0;&#x8282;&#x70B9;,&#x8FD4;&#x56DE;&#x8BE5;&#x8282;&#x70B9;</li>\n<li>&#x76F8;&#x5173;:\n<ul>\n<li><a href="#unlinkcancelledwaiters">unlinkCancelledWaiters()</a></li>\n</ul>\n</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Node</span> t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>\n    <span class="token comment">// &#x5224;&#x65AD;&#x5C3E;&#x8282;&#x70B9;&#x662F;&#x5426;&#x88AB;&#x53D6;&#x6D88;,&#x88AB;&#x53D6;&#x6D88;&#x5C31;&#x5C06;&#x5176;&#x6E05;&#x9664;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// &#x961F;&#x5217;&#x4E3A;&#x7A7A;&#x5219;&#x8BBE;&#x4E3A;&#x5934;&#x8282;&#x70B9;,&#x5426;&#x5219;&#x8BBE;&#x5728;&#x5C3E;&#x8282;&#x70B9;&#x4E4B;&#x540E;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n        t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    <span class="token comment">// &#x6700;&#x7EC8;&#x8FD9;&#x4E2A;&#x8282;&#x70B9;&#x90FD;&#x662F;&#x5C3E;&#x8282;&#x70B9;</span>\n    lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> node<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="dosignalnode">doSignal(Node)</h3>\n\n<ul>\n<li>&#x5C06;&#x6761;&#x4EF6;&#x961F;&#x5217;&#x7684;&#x5934;&#x8282;&#x70B9;&#x5524;&#x9192;,&#x52A0;&#x5165;&#x5230;AQS&#x7684;&#x540C;&#x6B65;&#x961F;&#x5217;&#x4E2D;</li>\n<li>&#x76F8;&#x5173;:\n<ul>\n<li><a href="#transferforsignalnode">transferForSignal(Node)</a></li>\n<li><a href="#signal-1">signal()</a></li>\n</ul>\n</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignal</span><span class="token punctuation">(</span><span class="token class-name">Node</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">do</span> <span class="token punctuation">{</span>\n        <span class="token comment">// &#x6821;&#x9A8C;&#x5F53;&#x524D;&#x961F;&#x5217;&#x662F;&#x5426;&#x4E3A;&#x7A7A;,&#x4E3A;&#x7A7A;&#x5C31;&#x5C06;&#x961F;&#x5217;&#x7F6E;&#x7A7A;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>firstWaiter <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n            lastWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token comment">// &#x5982;&#x679C;&#x8F6C;&#x79FB;&#x5230;&#x540C;&#x6B65;&#x961F;&#x5217;&#x5931;&#x8D25;,&#x90A3;&#x4E48;&#x5C31;&#x901A;&#x8FC7;&#x81EA;&#x65CB;&#x7684;&#x65B9;&#x5F0F;&#x91CD;&#x590D;&#x5C1D;&#x8BD5;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                <span class="token punctuation">(</span>first <span class="token operator">=</span> firstWaiter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="dosignalallnode">doSignalAll(Node)</h3>\n\n<ul>\n<li>&#x5C06;&#x6240;&#x6709;&#x7684;&#x6761;&#x4EF6;&#x961F;&#x5217;&#x4E0A;&#x7684;&#x8282;&#x70B9;&#x5524;&#x9192;&#xFF0C;&#x52A0;&#x5165;&#x5230;&#x540C;&#x6B65;&#x961F;&#x5217;</li>\n<li>&#x76F8;&#x5173;:\n<ul>\n<li><a href="#transferforsignalnode">transferForSignal(Node)</a></li>\n<li><a href="#signalall">signalAll()</a></li>\n</ul>\n</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignalAll</span><span class="token punctuation">(</span><span class="token class-name">Node</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// &#x5C06;&#x9996;&#x5C3E;&#x8282;&#x70B9;&#x7F6E;&#x7A7A;,&#x5141;&#x8BB8;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x8FDB;&#x884C;&#x6DFB;&#x52A0;&#x7B49;&#x64CD;&#x4F5C;</span>\n    lastWaiter <span class="token operator">=</span> firstWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">do</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Node</span> next <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">;</span>\n        first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        first <span class="token operator">=</span> next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="unlinkcancelledwaiters">unlinkCancelledWaiters()</h3>\n\n<ul>\n<li>&#x628A;&#x961F;&#x5217;&#x4E2D;&#x5904;&#x5728;<a href="#cancelled">CANCELLED</a>&#x72B6;&#x6001;&#x4E0B;&#x7684;&#x8282;&#x70B9;&#x79FB;&#x9664;</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Node</span> t <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> trail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// &#x7F13;&#x5B58;&#x7B49;&#x5F85;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x4E0B;&#x4E2A;&#x8282;&#x70B9;</span>\n        <span class="token class-name">Node</span> next <span class="token operator">=</span> t<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">;</span>\n        <span class="token comment">// &#x4E0D;&#x4E3A;CONDITION,&#x90A3;&#x5C31;&#x662F;CANCELLED</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// &#x89E3;&#x9664;next&#x7684;&#x5173;&#x7CFB;</span>\n            t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n            <span class="token comment">// &#x5982;&#x679C;trail&#x4E3A;&#x7A7A;,&#x8BF4;&#x660E;&#x540C;&#x6B65;&#x961F;&#x5217;&#x8FD8;&#x672A;&#x904D;&#x5386;&#x5230;&#x6709;&#x6548;&#x8282;&#x70B9;,&#x90A3;&#x4E48;&#x5C31;&#x628A;next&#x8BBE;&#x4E3A;&#x5934;&#x8282;&#x70B9;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>trail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                firstWaiter <span class="token operator">=</span> next<span class="token punctuation">;</span>\n            <span class="token keyword">else</span>\n                trail<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> next<span class="token punctuation">;</span>\n            <span class="token comment">// &#x5982;&#x679C;&#x6CA1;&#x6709;&#x4E0B;&#x4E00;&#x4E2A;,&#x53EF;&#x80FD;&#x662F;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#x6216;&#x904D;&#x5386;&#x5230;&#x5C3E;&#x90E8;&#x4E86;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                lastWaiter <span class="token operator">=</span> trail<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span>\n            <span class="token comment">// &#x4E0A;&#x4E00;&#x4E2A;&#x72B6;&#x6001;&#x4E3A;CONDITION&#x7684;&#x8282;&#x70B9;</span>\n            trail <span class="token operator">=</span> t<span class="token punctuation">;</span>\n        t <span class="token operator">=</span> next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="signal-1">signal()</h3>\n\n<ul>\n<li>&#x5524;&#x9192;&#x6761;&#x4EF6;&#x961F;&#x5217;&#x7684;&#x9996;&#x8282;&#x70B9;</li>\n<li>&#x76F8;&#x5173;:\n<ul>\n<li><a href="#isheldexclusively">isHeldExclusively()</a></li>\n<li><a href="#dosignalnode">doSignal(Node)</a></li>\n</ul>\n</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token function">doSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="signalall">signalAll()</h3>\n\n<ul>\n<li>&#x5524;&#x9192;&#x6761;&#x4EF6;&#x961F;&#x5217;&#x7684;&#x6240;&#x6709;&#x8282;&#x70B9;</li>\n<li>&#x76F8;&#x5173;:\n<ul>\n<li><a href="#isheldexclusively">isHeldExclusively()</a></li>\n<li><a href="#dosignalallnode">doSignalAll(Node)</a></li>\n</ul>\n</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Node</span> first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token function">doSignalAll</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre><h3 class="mume-header" id="awaituninterruptibly">awaitUninterruptibly()</h3>\n\n<ul>\n<li>&#x76F8;&#x5173;:\n<ul>\n<li><a href="#addconditionwaiter">addConditionWaiter()</a></li>\n<li><a href="#fullyreleasenode">fullyRelease(Node)</a></li>\n<li><a href="#isonsyncqueuenode">isOnSyncQueue(Node)</a></li>\n<li><a href="#acquirequeuednode-int">acquireQueued(Node, int)</a></li>\n<li><a href="#selfinterrupt">selfInterrupt()</a></li>\n</ul>\n</li>\n</ul>\n<pre data-role="codeBlock" data-info="java" class="language-java"><span class="code-mark">java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">awaitUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">||</span> interrupted<span class="token punctuation">)</span>\n        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</pre>\n      </div>\n      <div class="md-sidebar-toc"><ul>\n<li><a href="#abstractqueuedsynchronizer">AbstractQueuedSynchronizer</a>\n<ul>\n<li><a href="#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F">&#x6210;&#x5458;&#x53D8;&#x91CF;</a>\n<ul>\n<li><a href="#head">head</a></li>\n<li><a href="#tail">tail</a></li>\n<li><a href="#state">state</a></li>\n</ul>\n</li>\n<li><a href="#%E6%9E%84%E9%80%A0%E5%99%A8">&#x6784;&#x9020;&#x5668;</a></li>\n<li><a href="#%E6%96%B9%E6%B3%95">&#x65B9;&#x6CD5;</a>\n<ul>\n<li><a href="#getstate">getState()</a></li>\n<li><a href="#setstateint">setState(int)</a></li>\n<li><a href="#compareandsetstateint-int">compareAndSetState(int, int)</a></li>\n<li><a href="#enqnode">enq(Node)</a></li>\n<li><a href="#addwaiternode">addWaiter(Node)</a></li>\n<li><a href="#setheadnode">setHead(Node)</a></li>\n<li><a href="#unparksuccessornode">unparkSuccessor(Node)</a></li>\n<li><a href="#doreleaseshared">doReleaseShared()</a></li>\n<li><a href="#setheadandpropagatenode-int">setHeadAndPropagate(Node, int)</a></li>\n<li><a href="#cancelacquirenode">cancelAcquire(Node)</a></li>\n<li><a href="#shouldparkafterfailedacquirenode-node">shouldParkAfterFailedAcquire(Node, Node)</a></li>\n<li><a href="#selfinterrupt">selfInterrupt()</a></li>\n<li><a href="#parkandcheckinterrupt">parkAndCheckInterrupt()</a></li>\n<li><a href="#acquirequeuednode-int">acquireQueued(Node, int)</a></li>\n<li><a href="#doacquireinterruptiblyint">doAcquireInterruptibly(int)</a></li>\n<li><a href="#doacquirenanosint-long">doAcquireNanos(int, long)</a></li>\n<li><a href="#doacquiresharedint">doAcquireShared(int)</a></li>\n<li><a href="#doacquiresharedinterruptiblyint">doAcquireSharedInterruptibly(int)</a></li>\n<li><a href="#doacquiresharednanosint-long">doAcquireSharedNanos(int, long)</a></li>\n<li><a href="#tryacquireint">tryAcquire(int)</a></li>\n<li><a href="#tryreleaseint">tryRelease(int)</a></li>\n<li><a href="#tryacquiresharedint">tryAcquireShared(int)</a></li>\n<li><a href="#tryreleasesharedint">tryReleaseShared(int)</a></li>\n<li><a href="#isheldexclusively">isHeldExclusively()</a></li>\n<li><a href="#acquireint">acquire(int)</a></li>\n<li><a href="#acquireinterruptiblyint">acquireInterruptibly(int)</a></li>\n<li><a href="#tryacquirenanosint-long">tryAcquireNanos(int, long)</a></li>\n<li><a href="#releaseint">release(int)</a></li>\n<li><a href="#acquiresharedint">acquireShared(int)</a></li>\n<li><a href="#acquiresharedinterruptiblyint">acquireSharedInterruptibly(int)</a></li>\n<li><a href="#tryacquiresharednanosint-long">tryAcquireSharedNanos(int, long)</a></li>\n<li><a href="#releasesharedint">releaseShared(int)</a></li>\n<li><a href="#hasqueuedthreads">hasQueuedThreads()</a></li>\n<li><a href="#hascontended">hasContended()</a></li>\n<li><a href="#getfirstqueuedthread">getFirstQueuedThread()</a></li>\n<li><a href="#fullgetfirstqueuedthread">fullGetFirstQueuedThread()</a></li>\n<li><a href="#isqueuedthread">isQueued(Thread)</a></li>\n<li><a href="#apparentlyfirstqueuedisexclusive">apparentlyFirstQueuedIsExclusive()</a></li>\n<li><a href="#hasqueuedpredecessors">hasQueuedPredecessors()</a></li>\n<li><a href="#getqueuelength">getQueueLength()</a></li>\n<li><a href="#getqueuedthreads">getQueuedThreads()</a></li>\n<li><a href="#getexclusivequeuedthreads">getExclusiveQueuedThreads()</a></li>\n<li><a href="#getsharedqueuedthreads">getSharedQueuedThreads()</a></li>\n<li><a href="#isonsyncqueuenode">isOnSyncQueue(Node)</a></li>\n<li><a href="#findnodefromtailnode">findNodeFromTail(Node)</a></li>\n<li><a href="#transferforsignalnode">transferForSignal(Node)</a></li>\n<li><a href="#transferaftercancelledwaitnode">transferAfterCancelledWait(Node)</a></li>\n<li><a href="#fullyreleasenode">fullyRelease(Node)</a></li>\n<li><a href="#ownsconditionobject">owns(ConditionObject)</a></li>\n</ul>\n</li>\n<li><a href="#node">Node</a>\n<ul>\n<li><a href="#shared">SHARED</a></li>\n<li><a href="#exclusive">EXCLUSIVE</a></li>\n<li><a href="#cancelled">CANCELLED</a></li>\n<li><a href="#signal">SIGNAL</a></li>\n<li><a href="#condition">CONDITION</a></li>\n<li><a href="#propagate">PROPAGATE</a></li>\n<li><a href="#waitstatus">waitStatus</a></li>\n<li><a href="#prev">prev</a></li>\n<li><a href="#next">next</a></li>\n<li><a href="#thread">thread</a></li>\n<li><a href="#nextwaiter">nextWaiter</a></li>\n<li><a href="#isshared">isShared()</a></li>\n<li><a href="#predecessor">predecessor()</a></li>\n</ul>\n</li>\n<li><a href="#conditionobject">ConditionObject</a>\n<ul>\n<li><a href="#firstwaiter">firstWaiter</a></li>\n<li><a href="#lastwaiter">lastWaiter</a></li>\n<li><a href="#addconditionwaiter">addConditionWaiter()</a></li>\n<li><a href="#dosignalnode">doSignal(Node)</a></li>\n<li><a href="#dosignalallnode">doSignalAll(Node)</a></li>\n<li><a href="#unlinkcancelledwaiters">unlinkCancelledWaiters()</a></li>\n<li><a href="#signal-1">signal()</a></li>\n<li><a href="#signalall">signalAll()</a></li>\n<li><a href="#awaituninterruptibly">awaitUninterruptibly()</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n      <a id="sidebar-toc-btn">&#x2261;</a>\n',e="title: AQS\nauthor: voidblank\ntags: [java, java源码, JDK1.8, 后台, 多线程, 锁]\nhtml:\n  embed_local_images: false\n  embed_svg: true\n  offline: false\n  toc: true\nprint_background: false\nexport_on_save:\n  html: true\n"}});
//# sourceMappingURL=16.ba74796cf0ebc3a14c81.js.map